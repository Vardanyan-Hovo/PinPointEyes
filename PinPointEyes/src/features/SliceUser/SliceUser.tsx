import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import {initialStateUser, IUserState} from "./User"
import {AsyncUserfetch} from "./asyncUser"
// import { RootState, AppThunk } from "../../app/store"
// import { fetchCount } from "./counterAPI"


export const userSlice = createSlice({
  name: "UserState",
  initialState: initialStateUser,
  reducers:{
  //   incrementByAmount: (state, action: PayloadAction<number>) => {
  //     state.value += action.payload
  //     //type: incrementByAmount
  //     //action.payload = incrementByAmount((value)=>value)
  //   },
  },


  
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(AsyncUserfetch.pending, (state) => {
        state._status = "loading"
      })
      .addCase(AsyncUserfetch.fulfilled, (state, action) => {
        state._status = "idle";
        const User:IUserState = action.payload;//understands this from here
                                               //"./userAPI"
                                               //return new Promise<{ data: IUserState }>( //
        state = User;
    })
      .addCase(AsyncUserfetch.rejected, (state) => {
        // state._status = "failed"
      })
  }
})

export default userSlice.reducer